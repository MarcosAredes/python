-------------------------------------------------------------------------------------------

Claro, o machine learning é um campo da inteligência artificial onde os 
sistemas são projetados para aprender e melhorar com a experiência, sem 
serem explicitamente programados para isso. Ele envolve algoritmos que 
permitem aos computadores aprender a realizar tarefas específicas com 
base em dados, em vez de dependerem de instruções programadas. Existem 
três tipos principais de aprendizado de máquina: supervisionado, não 
supervisionado e por reforço. No aprendizado supervisionado, os algoritmos 
são treinados em um conjunto de dados rotulados, onde cada exemplo é associado 
a uma saída desejada. No aprendizado não supervisionado, os algoritmos são 
alimentados com dados não rotulados e devem encontrar estruturas ou padrões 
por conta própria. O aprendizado por reforço envolve agentes que aprendem a 
agir em um ambiente para alcançar uma meta específica, recebendo feedback em 
forma de recompensas ou penalidades. Essas técnicas têm uma ampla gama de aplicações, 
desde reconhecimento de voz e imagem até diagnóstico médico e previsão de mercado.

------------------------------------------------------------------------------------------------

Linguagens / languages

Python:

Python é uma das linguagens mais populares para machine learning devido à sua simplicidade, versatilidade e à grande quantidade de bibliotecas disponíveis.
Bibliotecas como NumPy, Pandas, Matplotlib e Scikit-learn são amplamente usadas para manipulação de dados, computação científica, visualização e aprendizado de máquina.
Também existem frameworks especializados em deep learning, como TensorFlow e PyTorch, que são muito populares e poderosos.

R:

R é uma linguagem especializada em estatísticas e análise de dados, sendo amplamente utilizada em ambientes acadêmicos e de pesquisa.
Oferece uma vasta coleção de pacotes especializados para análise estatística e machine learning, como caret, randomForest e glmnet.

Java:

Java é uma linguagem popular para desenvolvimento de software empresarial e também é usada em machine learning.
O framework Weka é muito conhecido na comunidade Java para tarefas de aprendizado de máquina e mineração de dados.

C++:

C++ é uma linguagem de programação de baixo nível que oferece alto desempenho, sendo usada em sistemas onde a eficiência é crucial, como em aplicativos de processamento de imagem e vídeo.
Frameworks como TensorFlow oferecem interfaces para C++ para desenvolvimento eficiente de modelos de deep learning.

Julia:

Julia é uma linguagem de programação de alto desempenho projetada para computação técnica, com uma sintaxe amigável e eficiência comparável a linguagens compiladas como C e Fortran.
Ela está ganhando popularidade na comunidade de machine learning devido à sua combinação de desempenho e facilidade de uso.

Scala:

Scala é uma linguagem de programação que combina programação orientada a objetos e funcional, sendo executada na JVM (Java Virtual Machine).
O framework Apache Spark é escrito em Scala e é muito usado para processamento de big data e tarefas de machine learning em larga escala.
Essas são apenas algumas das linguagens populares para machine learning, e a escolha da linguagem depende das preferências pessoais, requisitos do projeto, ecossistema existente e necessidades de desempenho.
----------------------------------------------------------------------------------------------------------------------------

IDEs

    Python:

    Jupyter Notebooks: Uma ferramenta popular para prototipagem rápida e exploração de dados, permitindo a execução 
    interativa de código Python em células.
    
    PyCharm: Uma IDE robusta desenvolvida pela JetBrains, oferecendo suporte avançado para desenvolvimento em Python, 
    incluindo análise de código, depuração e integração com ferramentas de ciência de dados.
    
    VSCode: O Visual Studio Code é uma IDE leve e altamente personalizável que oferece suporte a Python por meio de 
    extensões, como o Python Extension, fornecendo recursos avançados de edição, depuração e controle de versão.
    
    R:

    RStudio: É uma IDE dedicada especificamente para trabalhar com R, oferecendo recursos avançados para análise de 
    dados, visualização e desenvolvimento em R.

    VSCode com extensões R: Assim como para Python, o VSCode pode ser configurado para desenvolvimento em R por meio 
    de extensões, como R Extension Pack, que oferece suporte para R Markdown, depuração e outras funcionalidades.

    Java:

    IntelliJ IDEA: Uma IDE poderosa da JetBrains, que oferece suporte abrangente ao desenvolvimento em Java, 
    incluindo ferramentas para desenvolvimento de aplicações empresariais e integração com frameworks de machine learning, como o Weka.

    Eclipse: Outra IDE popular para desenvolvimento em Java, com uma grande comunidade de usuários e 
    suporte a uma variedade de plugins para trabalhar com machine learning.

    C++:

    Visual Studio: Uma IDE amplamente usada para desenvolvimento em C++ que oferece suporte a projetos 
    de machine learning, especialmente aqueles que utilizam frameworks como TensorFlow com interface em C++.

    CLion: Uma IDE da JetBrains projetada especificamente para desenvolvimento em C e C++, oferecendo 
    ferramentas avançadas de edição, depuração e controle de versão.

    Julia:

    JuliaPro: Uma distribuição oficial do Julia que inclui uma IDE baseada no Juno, fornecendo um 
    ambiente integrado para desenvolvimento em Julia, incluindo suporte a pacotes de machine learning como Flux.jl e outros.

    Essas são apenas algumas opções de IDEs para trabalhar com machine learning em diferentes linguagens de 
    programação. A escolha da IDE dependerá das suas preferências pessoais, do ecossistema de desenvolvimento da linguagem 
    escolhida e dos recursos específicos que você precisa para o seu projeto.

OBS:
    Só Python

------------------------------------------------------------------------------------------------------------------------------
Caso não sabe nada ou esqueceu

Python:
    Vá para o arquivo:
            Python/Aprendendo_Python

---------------------------------------------------------------------------------------------------------------------------------

Python caso o animal não for até a pasta (fdp!)

° Módulos e pacotes específicos para ML/DS

- Variável: 

    ° "Espaço" em memória, para guardar um valor durante a execução do programa.

    ° Por exemplo, você tem um programa para prever vendas. Você vai precisar de uma variável para,
    por exemplo, saber quantos mesmes para frente o programa tem q prever.

    ° Tipo de variaveis:
       ° Texto (String) ==> ex: Omega, Opala, Caravan
       ° Inteiro ==> 18, 25, 75
       ° Float ==> 1,80 , 2,50 , 7,50
       ° Lógico ==> True or Flase 
    
    ° Principais Operadores:
        ° " + , - , / , * "

    ° Para exibir valor no console:
        ° print("texto e duas variaveis", x , z)

    ° Tipo:

        ° type (x)
            x = 10
                vai retornar <class 'int'>
        
        ° type (y)
            y = Python
                vai retornar <class 'str'>
    
    ° Input
        ° Nesse você pede o usuário para informar o valor
         x = input ("Informe o valor!")
         O valor que o usuário colocar será o valor da variável
    
    ° Comentarios:
        ° E só usar o #
            # Esse texto não será lido
        ° Tem o comentario de várias linhas sendo
            ''' 
            Aqui não tem nada
            '''
    
- Estruturas de Decisão
    
    ° O programa deve decidir entre diferentes fluxos, de acordo com entradas

    ° Por exemplo, se a nota de um aluno é maior ou igual a 7, 
    ele é aprovado, caso contrário é reprovado.

    ° Isso é if, else, elif:
        Basicamente funciona e assim a media da nota para passar e 7 então

        if (se) x (variavel com input) for >= 7:
            print ("Aprovado") 
            No console vai aparecer aprovado
        
        else (se não):
            x < 7
            print("Reprovado")
        
        elif (se não for if nem else) 
            """Ou se o else bugar coloca
            elif que da certo"""

            fudeu por que não tem nada


    ° Indentação:
        if (Condição logica):
            // Bloco de código
            // Bloco de código
            // Bloco de código
            // Bloco de código
        
        elif (Condição logica):
            // Bloco de código
            // Bloco de código
            // Bloco de código
            // Bloco de código
        
        else:
            // Bloco de código
            // Bloco de código

        Esse "// Bloco de código" e a indentação você coloca os bloco
        de codigo para dentro do comando pode ser if, else ou elif
        não tem sistema de {[()]}.
        
        Seria assim
            if (Condição logica){
            // Bloco de código
            // Bloco de código
            // Bloco de código
            // Bloco de código
            }
         onde as chaves determina onde começa, onde termina.

    ° Operadores de comparação:
        < - menor que
        > - maior que
        <= - menor igual
        >= - maior igual   
        != - diferentes
        == - igual
    
    ° Operadores Lógicos:
       ° and - E
       ° or - ou 
       ° not - não
    
- Estruturas de Repetição:

    ° Muitas vezes estruturas de código tem que ser repetidas

    ° Em muitos casos, estas repetições são definidas dinamicamente
    (Input do usuário).

    ° Dois tipos Principais
        
        °   Enquanto (While): Executa um bloco de código enquanto uma 
            condição específica for verdadeira. É útil quando o 
            número de repetições não é conhecido antecipadamente.
        
        °   Para (For): Executa um bloco de código um número 
            específico de vezes ou itera sobre uma sequência de elementos. 
            É comumente usado quando o número de repetições é conhecido antecipadamente.
    
    ° No python e While e o For são loops
        
        ° While
            count = 1
            whinle count <= 5 :
                print(count)
                count += 1

                (Enquanto for menor do que 5 será adicionado 1)
        
        ° For 
            ° O for provavelmente você vai utilizar com range que seria o numero de repetições
                for x in range(0, 10):
                Vai repetir o x 10 vezes ou 20 se você quiser
            
            ° range (0, 10, 1):
                #range (Inicio, parada, incremento);
                O incremento pode ser negativo.
            
            ° break
                # cancela o loop
            
            ° continue
                # reinicia o loop
            
- Lista
    
    ° Vetor de Valores
    
    ° Dados não precisam ser do mesmo tipos

    


