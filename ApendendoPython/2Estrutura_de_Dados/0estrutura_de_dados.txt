Introdução a lista:

Toda lista ela vai começar e finalizar com [] dentro da lista se chama 
itens, que ficam dentro de alguma variável.

Pra que serve: Armazenar mais de uma informação em variáveis e manter
a sequencia dos dados em uma variável.

******************************************
car = ['Impala', 'Camaro', 'Mustang', 911]

print(car)
*********************************************

--------------------------------------------------------------------------------------------------

#Manipulando listas:

#Os intem da listas são = index vai ser assim
car = ['Impala', 'Camaro', 'Mustang', 911]
          0          1          2      3

#então caso você queira puxar algum item de dentro da lista  

print(car[0])
#vai imprimir 'Impala' assim em diante

#Caso precise mudar algum produto você precisa mudar fora da variável e do print

car = ['Impala', 'Camaro', 'Mustang', 911]

car [0] = 'C10'

print(car) = ['C10', 'Camaro', 'Mustang', 911]


-------------------------------------------------------------------------------------------------

Funções dentro de listas:

Documentação oficial do python:

https://docs.python.org/3/tutorial/datastructures.html

Está tudo dentro da documentação oficial do python


list.append(x)
Add an item to the end of the list. Equivalent to a[len(a):] = [x].

list.extend(iterable)
Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable.

list.insert(i, x)
Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).

list.remove(x)
Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item.

list.pop([i])
Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. (The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.)

list.clear()
Remove all items from the list. Equivalent to del a[:].

list.index(x[, start[, end]])
Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is no such item.

The optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.

list.count(x)
Return the number of times x appears in the list.

list.sort(*, key=None, reverse=False)
Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).

list.reverse()
Reverse the elements of the list in place.

list.copy()
Return a shallow copy of the list. Equivalent to a[:].

************************************************************

car = ['Impala', 'Camaro', 'Mustang', 911]

car.append('C10')
print(car)

**************************************************************


car = ['Impala', 'Camaro', 'Mustang', 911]

car.remove('Impala')
print(car)

****************************************************************

--------------------------------------------------------------------------------------------------------------------------

Concatenando listas:

Colocar duas listas juntas, multiplicar listas, colocar uma dentro da outra.

Multiplicando a lista:

******************************************

numbers = [1, 2, 3, 4, 5]

final = numbers * 2
print(final)

********************************************

Juntar duas listas:

*********************************************

numbers = [1, 2, 3, 4, 5]
letras = ['a' , 'b' , 'c' , 'd' , 'e']

final = numbers + letras
print(final)


numbers = [1, 2, 3, 4, 5]
letras = ['a' , 'b' , 'c' , 'd' , 'e']

numbers.extend(letras)
print(numbers)

*********************************************

Crindo listas dentro de listas:

**********************************************

itens = [['item1' , 'item2'] , ['item3' , 'item4']]
#                 0                     1
#            0          1          0          1
print(itens[0] [1])

 nesse caso iria imprimir o 'item2'

Pois dentro da lista tem duas sub-lista que contem as ordens corretas.

itens = [['item1' , 'item2'] , ['item3' , 'item4']]
#                 0                     1
#            0          1          0          1
print(itens[1] [1])

    nesse caso iria imprimir o 'item4'

*********************************************************

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Extraindo variáveis de listas:

Primeiro você define sua lista do jeito que você quiser depois você define uma variável para
algum item da lista. 

Ex:
*********************************************

produtos = ['a', 'b', 'c', 'd']

item0 = produtos[0]
item1 = produtos[1]
item2 = produtos[2]
item3 = produtos[3]

print (item0)
print (item1)
print (item2)
print (item3)

**********************************************

Reduzindo o tamanho do codigo;

produtos = ['a', 'b', 'c', 'd']

item0 , item1 , item2 , item3 = produtos

print (item0)
print (item1)
print (item2)
print (item3)

************************************************

O problema e se você não quiser puxar todos os itens da erro 
para corrigir e bem simples

item0 , item1 , item2 , item3 = produtos ---> erro
item0 , item1 , item2 , *itens = produtos ---> o codigo roda com você podendo acresentar itens na lista

produtos = ['a', 'b', 'c', 'd']

item0 , item1 , item2 , *itens = produtos

print (item0)
print (item1)
print (item2)
print (itens)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

looping dentro de lista:

você irá usar o for loops para poder fazer isso


***************************************************
valores = [50, 80, 100, 120, 150]

for x in valores:
    print(f'O valor final do produto é R${x}.')

****************************************************

Verificando itens da lista

Um sistema de input com if, else com lower() se caso digitar em letra 
Maiuscula

**********************************************
cli = input('Qual cor tu quer?')
cores = ['amarelo' , 'vermelho' , 'azul', 'roxo']

if cli.lower() in cores:
    print('Tem sim')
else:
    print('Tem não ')
********************************************

-----------------------------------------------------------------

Agregando Duas listas com Zip

Basicamente você tem duas listas não vai juntar as duas lista como se 
em vez disso

************************************************
numbers = [1, 2, 3, 4, 5]
letras = ['a' , 'b' , 'c' , 'd' , 'e']

final = numbers + letras
print(final)

que o resultado é: [1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e']

************************************************************

vai ser assim

cor = ['amarelo', 'preto', 'azul', 'roxo']
valor = [10 , 20 , 30, 40]


two_list = zip(cor, valor)

print(list(two_list))

resultado:[('amarelo', 10), ('preto', 20), ('azul', 30), ('roxo', 40)]
*************************************************************************

-----------------------------------------------------------------------------------------------------------------------------

Input em lista

você captura dados do usuario e faz uma lista com esses dados como se fosse uma lista de
supermercado

***********************************************

fruta_user = input('Faça sua lista separado por virgula:')

fruit_list = fruta_user.split(', ')

print(fruit_list)

***********************************************

------------------------------------------------------------------------------------------------------------------------------------------------------

Tuples

Tudo e uma lista mas a forma que é escrito e diferente e como e amarzenado na memoria também
e que não podem ser alteradas a diferença e quando se deve usar  e que uma tuple se abre e fecha
com (), você faz basicamente tudo que se faz com uma lista

***************************************************

cor0 = ['amarelo', 'preto', 'azul', 'roxo']

cor1 = ('amarelo', 'preto', 'azul', 'roxo')


print(type(cor0))
print(type(cor1))

resultado:
<class 'list'>
<class 'tuple'>

******************************************************

você não adiciona itens em tuplas igual adiciona itens na listas, nem remover nem alterar.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

Arrays:

Arrays não tem no python originalmente então você tem que imprtar ela 
'''from array import array''' 

Arrays será usada quando quando sua lista for muito grande e estiver tendo problemas de perfomace

### LER A LISTA ARRAYS 11.1 PARA COMPREENDER###


****************************************************


from array import array

# Array (Matriz)
    # Similar a lista
    # Melhor performace

letras = ['a', 'b', 'c', 'd']

numeros_i = [10, 20, 30, 40]
numeros_f = [1.2, 2.2, 3.2]

print(letras)
print(numeros_i)
print(numeros_f)

print()

letras = array( 'u', ['a', 'b', 'c', 'd'])

#cada letra dessas "u" "i" "f" significa algo por isso ver a lista

numeros_i = array( 'i', [10, 20, 30, 40])
numeros_f = array ( 'f' ,  [1.2, 2.2, 3.2])


print(letras)
print(numeros_i)
print(numeros_f)


************************************************************

