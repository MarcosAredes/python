Trabalhar com banco de dados em Python pode ser feito de várias 
maneiras, dependendo das suas necessidades e preferências. Aqui 
estão algumas bibliotecas populares para interagir com bancos de 
dados em Python:


1.

SQLite (Biblioteca padrão do Python):

O SQLite é uma biblioteca embutida no Python, o que significa que não 
é necessário instalar nada adicional.

É uma ótima escolha para pequenos projetos ou quando você precisa de
um banco de dados simples e local.


2.

MySQL e MariaDB:

Utilize a biblioteca mysql-connector ou pymysql para se conectar a 
bancos de dados MySQL ou MariaDB.


3.

PostgreSQL:

Use a biblioteca psycopg2 para interagir com bancos de dados 
PostgreSQL.


4.

MongoDB (banco de dados NoSQL):

Utilize a biblioteca pymongo para interagir com bancos de dados MongoDB.


-----------------------------------------------------------------------------------

SQLAlchemy

O SQLAlchemy é uma biblioteca popular em Python que fornece uma camada 
de abstração sobre diferentes bancos de dados relacionais, tornando 
mais fácil interagir com eles usando Python. Ele suporta uma abordagem 
baseada em ORM (Object-Relational Mapping) ou SQL puro, dando flexibilidade 
aos desenvolvedores.


------------------------------------------------------------------------------------


ORM (Object-Relational Mapping) é um paradigma de programação que 
permite a interação entre objetos de uma linguagem de programação 
orientada a objetos e um banco de dados relacional. Em outras palavras, 
ele mapeia as estruturas de dados em um banco de dados relacional para 
objetos em uma linguagem de programação e vice-versa. O objetivo é 
simplificar o código e abstrair as complexidades associadas ao 
trabalho com bancos de dados relacionais.

No contexto do Python e SQLAlchemy, o ORM permite que você trabalhe 
com bancos de dados relacionais usando classes e objetos Python, em 
vez de escrever consultas SQL diretamente. Aqui estão alguns 
conceitos-chave associados ao uso de ORM com SQLAlchemy:


1.

Classes de Modelo:

As classes de modelo representam as tabelas no banco de dados. 
Cada instância da classe representa uma linha na tabela.



    from sqlalchemy import Column, Integer, String, Sequence
    from sqlalchemy.ext.declarative import declarative_base

    Base = declarative_base()

    class Usuario(Base):
        __tablename__ = 'usuarios'
        id = Column(Integer, Sequence('usuario_id_seq'), primary_key=True)
        nome = Column(String(50))
        idade = Column(Integer)


2.

Session:

A Session é usada para interagir com o banco de dados. 
Ela gerencia transações e é responsável por persistir as mudanças 
feitas nos objetos de modelo no banco de dados.

    from sqlalchemy.orm import sessionmaker

    # Criar uma sessão
    Session = sessionmaker(bind=engine)
    session = Session()


3.

Consulta:

As consultas no SQLAlchemy ORM são feitas usando a classe de modelo.


    # Consultar todos os usuários
    usuarios = session.query(Usuario).all()

    # Consultar usuários com idade maior que 30
    usuarios = session.query(Usuario).filter(Usuario.idade > 30).all()


4.
Relacionamentos:

O SQLAlchemy ORM facilita a definição de relacionamentos entre as 
tabelas, como relacionamentos de chave estrangeira.

    from sqlalchemy import ForeignKey
    from sqlalchemy.orm import relationship

    class Compra(Base):
        __tablename__ = 'compras'
        id = Column(Integer, Sequence('compra_id_seq'), primary_key=True)
        usuario_id = Column(Integer, ForeignKey('usuarios.id'))
        produto = Column(String(50))

        # Definir um relacionamento
        usuario = relationship("Usuario", back_populates="compras")

Esses são conceitos básicos, e o SQLAlchemy oferece muitos recursos 
avançados, como migrações automáticas, consultas complexas e suporte 
a diferentes bancos de dados. Ao usar ORM, o desenvolvedor pode se 
concentrar mais na lógica do aplicativo, enquanto as operações de 
banco de dados são gerenciadas pela biblioteca.

----------------------------------------------------------------------------------------------

SGBD (Sistema Gerenciador de Banco de Dados) refere-se a um software 
que oferece serviços para criar e gerenciar bancos de dados. Eles são 
essenciais para armazenar, organizar, recuperar e gerenciar dados de 
forma eficiente. Existem vários SGBDs disponíveis, e a escolha 
geralmente depende dos requisitos específicos do projeto. Aqui estão 
alguns dos SGBDs mais populares:


1.

MySQL:

MySQL é um SGBD de código aberto que é amplamente utilizado para 
aplicativos web. Ele suporta a linguagem SQL e é conhecido por sua 
confiabilidade, desempenho e facilidade de uso.


2.

PostgreSQL:

PostgreSQL é um SGBD de código aberto conhecido por sua conformidade 
com padrões, extensibilidade e suporte a tipos de dados avançados. É 
altamente escalável e adequado para uma variedade de aplicações.


3.

SQLite:

SQLite é um SGBD leve e embutido que não requer um servidor separado 
e não precisa de configuração. É adequado para aplicativos locais e é 
comumente usado em aplicativos móveis e pequenos projetos.


4.

Oracle Database:

Oracle é um SGBD comercial conhecido por sua confiabilidade, 
escalabilidade e recursos avançados. É amplamente utilizado em 
grandes empresas e aplicações empresariais.


5.

Microsoft SQL Server:

SQL Server é um SGBD da Microsoft que oferece uma variedade de 
recursos, incluindo integração com outras ferramentas da Microsoft, 
segurança avançada e suporte a procedimentos armazenados.


6.

MongoDB:

MongoDB é um SGBD NoSQL que armazena dados em formato JSON-like 
(BSON). Ele é conhecido por sua escalabilidade horizontal, 
flexibilidade e capacidade de lidar com dados não estruturados.


7.

MariaDB:

MariaDB é um fork do MySQL e oferece compatibilidade com MySQL, além 
de apresentar algumas melhorias e recursos adicionais. É uma escolha 
popular para aqueles que desejam uma alternativa ao MySQL.


8.

Redis:

Redis é um SGBD NoSQL em memória, usado principalmente como um 
armazenamento de chave-valor. É conhecido por sua velocidade e é 
frequentemente utilizado em cenários que exigem baixa latência.

9.

Cassandra:

Apache Cassandra é um SGBD NoSQL distribuído, projetado para alta 
disponibilidade e escalabilidade linear. É especialmente adequado
para aplicativos que precisam lidar com grandes volumes de dados 
distribuídos.


Cada SGBD tem suas próprias características, vantagens e casos de uso 
ideais. A escolha do SGBD dependerá das necessidades específicas do 
seu projeto, como requisitos de desempenho, escalabilidade, modelo de 
dados, entre outros fatores.


---------------------------------------------------------------------------------------

O pymongo é uma biblioteca Python que permite interagir com o banco 
de dados NoSQL MongoDB. Ele fornece uma API simples e intuitiva para 
realizar operações no MongoDB usando Python.


Esses são apenas exemplos básicos. O pymongo oferece suporte a uma 
variedade de operações e funcionalidades, incluindo consultas
avançadas, índices, autenticação e muito mais. Certifique-se de 
consultar a documentação oficial do pymongo para obter 
informações detalhada

Lembre-se de que, ao trabalhar com o MongoDB, você pode precisar 
garantir que o servidor MongoDB esteja em execução e acessível, e 
que você tenha as permissões adequadas para acessar o banco de dados.
----------------------------------------------------------------------------------------
                SABER MAIS:


Python e SQLite​


https://www.sqlalchemy.org/​

https://docs.sqlalchemy.org/en/14/tutorial/index.html​

https://docs.sqlalchemy.org/en/14/orm/quickstart.html​

https://docs.sqlalchemy.org/en/14/orm/tutorial.html​



Dialetos​


https://docs.sqlalchemy.org/en/14/dialects/index.html​

SQLite - https://docs.sqlalchemy.org/en/14/dialects/sqlite.html​

MySQL - https://docs.sqlalchemy.org/en/14/dialects/mysql.html Subqueries e demais recursos​

https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting- data​




Modelo ORM​

​

https://docs.sqlalchemy.org/en/14/orm/index.html​

​

https://docs.sqlalchemy.org/en/14/orm/quickstart.html​

​

Modelo Core​

​

https://docs.sqlalchemy.org/en/14/core/index.html​

​

https://docs.sqlalchemy.org/en/14/core/tutorial.html​